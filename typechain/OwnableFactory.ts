/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractFactory, Signer} from "ethers";
import {Provider} from "ethers/providers";
import {UnsignedTransaction} from "ethers/utils/transaction";

import {Ownable} from "./Ownable";

export class OwnableFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(): Promise<Ownable> {
    return super.deploy() as Promise<Ownable>;
  }
  getDeployTransaction(): UnsignedTransaction {
    return super.getDeployTransaction();
  }
  attach(address: string): Ownable {
    return super.attach(address) as Ownable;
  }
  connect(signer: Signer): OwnableFactory {
    return super.connect(signer) as OwnableFactory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Ownable {
    return new Contract(address, _abi, signerOrProvider) as Ownable;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "oSlot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610207806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063f09078431461003b578063f2fde38b14610055575b600080fd5b61004361007d565b60408051918252519081900360200190f35b61007b6004803603602081101561006b57600080fd5b50356001600160a01b03166100ad565b005b604080517727bbb730b136329739ba37b930b3b2973637b1b0ba34b7b760411b8152905190819003601801902081565b6100b5610108565b546001600160a01b031633146100fc5760405162461bcd60e51b81526004018080602001828103825260278152602001806101ab6027913960400191505060405180910390fd5b61010581610138565b50565b604080517727bbb730b136329739ba37b930b3b2973637b1b0ba34b7b760411b8152905190819003601801902090565b806001600160a01b031661014a610108565b546040516001600160a01b03909116907fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c90600090a380610189610108565b80546001600160a01b0319166001600160a01b03929092169190911790555056fe4f776e61626c652e6f6e6c794f776e65723a206d73672e73656e646572206e6f74206f776e6572a2646970667358221220144844ab9efc7c74e6d35dce1d5b08cb033ec65c32018f0cf3f2df59e5db7af064736f6c63430006040033";
