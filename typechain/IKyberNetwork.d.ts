/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {TransactionOverrides, TypedEventDescription, TypedFunctionDescription} from ".";

interface IKyberNetworkInterface extends Interface {
  functions: {
    trade: TypedFunctionDescription<{
      encode([src, srcAmount, dest, destAddress, maxDestAmount, minConversionRate, walletId]: [
        string,
        BigNumberish,
        string,
        string,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;
  };

  events: {};
}

export class IKyberNetwork extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IKyberNetwork;
  attach(addressOrName: string): IKyberNetwork;
  deployed(): Promise<IKyberNetwork>;

  on(event: EventFilter | string, listener: Listener): IKyberNetwork;
  once(event: EventFilter | string, listener: Listener): IKyberNetwork;
  addListener(eventName: EventFilter | string, listener: Listener): IKyberNetwork;
  removeAllListeners(eventName: EventFilter | string): IKyberNetwork;
  removeListener(eventName: any, listener: Listener): IKyberNetwork;

  interface: IKyberNetworkInterface;

  functions: {
    trade(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  trade(
    src: string,
    srcAmount: BigNumberish,
    dest: string,
    destAddress: string,
    maxDestAmount: BigNumberish,
    minConversionRate: BigNumberish,
    walletId: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    trade(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string
    ): Promise<BigNumber>;
  };
}
