/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {TransactionOverrides, TypedEventDescription, TypedFunctionDescription} from ".";

interface TestReentryProtectionInterface extends Interface {
  functions: {
    reenter: TypedFunctionDescription<{encode([]: []): string}>;

    rpSlot: TypedFunctionDescription<{encode([]: []): string}>;

    test: TypedFunctionDescription<{encode([]: []): string}>;
  };

  events: {};
}

export class TestReentryProtection extends Contract {
  connect(signerOrProvider: Signer | Provider | string): TestReentryProtection;
  attach(addressOrName: string): TestReentryProtection;
  deployed(): Promise<TestReentryProtection>;

  on(event: EventFilter | string, listener: Listener): TestReentryProtection;
  once(event: EventFilter | string, listener: Listener): TestReentryProtection;
  addListener(eventName: EventFilter | string, listener: Listener): TestReentryProtection;
  removeAllListeners(eventName: EventFilter | string): TestReentryProtection;
  removeListener(eventName: any, listener: Listener): TestReentryProtection;

  interface: TestReentryProtectionInterface;

  functions: {
    reenter(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    rpSlot(): Promise<string>;

    test(overrides?: TransactionOverrides): Promise<ContractTransaction>;
  };

  reenter(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  rpSlot(): Promise<string>;

  test(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    reenter(): Promise<BigNumber>;

    rpSlot(): Promise<BigNumber>;

    test(): Promise<BigNumber>;
  };
}
