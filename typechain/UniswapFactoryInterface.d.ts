/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {TransactionOverrides, TypedEventDescription, TypedFunctionDescription} from ".";

interface UniswapFactoryInterfaceInterface extends Interface {
  functions: {
    createExchange: TypedFunctionDescription<{
      encode([token]: [string]): string;
    }>;

    getExchange: TypedFunctionDescription<{
      encode([token]: [string]): string;
    }>;

    getToken: TypedFunctionDescription<{
      encode([exchange]: [string]): string;
    }>;

    getTokenWithId: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string;
    }>;

    initializeFactory: TypedFunctionDescription<{
      encode([template]: [string]): string;
    }>;
  };

  events: {};
}

export class UniswapFactoryInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): UniswapFactoryInterface;
  attach(addressOrName: string): UniswapFactoryInterface;
  deployed(): Promise<UniswapFactoryInterface>;

  on(event: EventFilter | string, listener: Listener): UniswapFactoryInterface;
  once(event: EventFilter | string, listener: Listener): UniswapFactoryInterface;
  addListener(eventName: EventFilter | string, listener: Listener): UniswapFactoryInterface;
  removeAllListeners(eventName: EventFilter | string): UniswapFactoryInterface;
  removeListener(eventName: any, listener: Listener): UniswapFactoryInterface;

  interface: UniswapFactoryInterfaceInterface;

  functions: {
    createExchange(token: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;

    getExchange(token: string): Promise<string>;

    getToken(exchange: string): Promise<string>;

    getTokenWithId(tokenId: BigNumberish): Promise<string>;

    initializeFactory(
      template: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  createExchange(token: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;

  getExchange(token: string): Promise<string>;

  getToken(exchange: string): Promise<string>;

  getTokenWithId(tokenId: BigNumberish): Promise<string>;

  initializeFactory(
    template: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    createExchange(token: string): Promise<BigNumber>;

    getExchange(token: string): Promise<BigNumber>;

    getToken(exchange: string): Promise<BigNumber>;

    getTokenWithId(tokenId: BigNumberish): Promise<BigNumber>;

    initializeFactory(template: string): Promise<BigNumber>;
  };
}
